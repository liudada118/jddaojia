/// <reference types="node" />
import URL from 'url';
import * as net from "net";
import * as http from "http";
import { Request, Response, NextFunction, Application } from 'express';
import bodyParser from 'body-parser';
import httpProxy from 'http-proxy';
import chokidar from 'chokidar';
declare type ProxyTargetUrl = string | Partial<URL.Url>;
export declare type MockerResultFunction = ((req: Request, res: Response, next?: NextFunction) => void);
export declare type MockerResult = string | {
    [key: string]: any;
} | MockerResultFunction;
export interface Mocker {
    _proxy?: MockerOption;
    [key: string]: MockerResult;
}
export declare type HttpProxyListeners = {
    start: (req: http.IncomingMessage, res: http.ServerResponse, target: ProxyTargetUrl) => void;
    proxyReq: (proxyReq: http.ClientRequest, req: http.IncomingMessage, res: http.ServerResponse, options: httpProxy.ServerOptions) => void;
    proxyRes: (proxyRes: http.IncomingMessage, req: http.IncomingMessage, res: http.ServerResponse) => void;
    proxyReqWs: (proxyReq: http.ClientRequest, req: http.IncomingMessage, socket: net.Socket, options: httpProxy.ServerOptions, head: any) => void;
    econnreset: (err: Error, req: http.IncomingMessage, res: http.ServerResponse, target: ProxyTargetUrl) => void;
    end: (req: http.IncomingMessage, res: http.ServerResponse, proxyRes: http.IncomingMessage) => void;
    close: (proxyRes: http.IncomingMessage, proxySocket: net.Socket, proxyHead: any) => void;
} & {
    [key: string]: () => void;
};
export interface MockerOption {
    changeHost?: boolean;
    pathRewrite?: Record<string, string>;
    proxy?: Record<string, string>;
    httpProxy?: {
        options?: httpProxy.ServerOptions;
        listeners?: HttpProxyListeners;
    };
    bodyParserConf?: {
        [key: string]: 'raw' | 'text' | 'urlencoded' | 'json';
    };
    bodyParserJSON?: bodyParser.OptionsJson;
    bodyParserText?: bodyParser.OptionsText;
    bodyParserRaw?: bodyParser.Options;
    bodyParserUrlencoded?: bodyParser.OptionsUrlencoded;
    watchOptions?: chokidar.WatchOptions;
    header?: {
        [key: string]: string | number | string[];
    };
}
export default function (app: Application, watchFile: string | string[] | Mocker, conf?: MockerOption): (req: Request, res: Response, next: NextFunction) => void;
export {};
